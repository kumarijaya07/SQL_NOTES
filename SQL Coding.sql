#Mathematical Functions:
#ROUND(): It is used to round up and round down the values
#if number is greater than equal to 0.5 then round up the value,
#if number is less then 0.5 than round down the value.
#MOD(): It show the reminder between two number. 
#CEIL(): It is used to round up the decimal value. 
#FLOOR: It is used to round the down the decimal value. 
#POWER OR POW(): It s used to add the power on any number.
#ABS(): With the help of this function we can find the root value of any function.
#SQRT(): with the help of this function, we can find the root value of any function. 
#SIGN(): It is used to show the direction of the values, If the value is positive then it show 1, 
#if the value is negative then it show -1. 
#RAND(): It is used to generate random number. 
----------------------------------------------------------------------------------------------------------------------------------------------------
SELECT ROUND(45.6);
SELECT ROUND(12.456,1);
SELECT ROUND(4.3256,2);
SELECT MOD(45,10);
SELECT CEIL(45.0001);
SELECT FLOOR(45.99);
SELECT POW(5,3);
SELECT POWER(10,3);
SELECT POW(5,5);
SELECT SQRT(144);
SELECT SQRT(625);
SELECT ABS(-12);
SELECT SIGN(-456);
SELECT SIGN(45);
SELECT RAND();
#PRINT THE RANDOM NUMBER FROM 1 TO 100
SELECT ROUND(RAND()*100);
#PRINT THE RANDOM NUMBER FROM 1 TO 500
SELECT ROUND(RAND()*500);
#PRINT THE RANDOM NUMBER FROMM 500 TO 1000
SELECT ROUND(500+RAND()*500);
#PRINT RANDOM NUMBER FROM 400 TO 600
SELECT ROUND(400+RAND()*200);
--------------------------------------------------------------------------------------------------------------------------------------------------
#STRING FUNCTION
#UPPER(): It is used to convert the all text in capital letter.
#LOWER(): It is used to convert the all text in small letter. 
#TRIM(): It is used to delete the extra space from starting and ending text.
#LEFT(): It is used to extract the alphabet from ending of the text. 
#RIGHT(): It is used to extract the alphabet from ending of the text. 
#NSTR(): It is used to find the index of alphabet from the text. 
#SUBTR(): It is used to extract the value from MID of the text. 
#REVERSE(): It is used to reverse the text. 
#REPLACE(): It is used to replace the alphabet from the old text to new text. 
#CONCAT(): It is used to combin the text. 
#CONCAT_WS():It is used to combine the text with seperators. 
#LENGTH(): It is used to show the length of the text. 
----------------------------------------------------------------------------------------------------------------
#CONVERT ALL "data science" TEXT IN CAPITAL LETTER
SELECT UPPER("data science");
#CONVERT ALL "data science" TEXT IN SMALL LETTER
SELECT LOWER("DATA SCIENCE");
#EXTRACT THE EXTRA SPACE OF FOLLOWING TEXT "  DATA SCIENCE  "
SELECT TRIM("  DATA SCIENCE  ");
#EXTRACT THE 4 TEXT FROM BEGNING OF THE FOLLOWING TEXT "DATA SCIENCE"
SELECT LEFT("DATA SCIENCE",4);
#EXTRACT THE 4 TEXT FROM ENDING OF THE FOLLOWING TEXT "DATA SCIENCE"
SELECT RIGHT("DATA SCIENCE",3);
#FIND THE POSITION OF "I" OF THE FOLLOWING TEXT "DATA SCIENCE"
SELECT INSTR("DATA SCIENCE","I");
SELECT SUBSTR("DATA SCIENCE",3,4);
SELECT MID("DATA SCIENCE",4,5);
SELECT REVERSE("DATA SCIENCE");
SELECT REPLACE("DATA","A","*");
SELECT CONCAT("DATA", "SCIENCE");
SELECT CONCAT_WS("---","DATA","SCIENCE");
SELECT LENGTH("DATA SCIENCE");
#EXTRACT DATA FROM THE TEXT "DATA SCIENCE"
SELECT LEFT("DATA SCIENCE",4);
#EXTRACT SCIENCE FROM THE TEXT "DATA SCIENCE"
SELECT RIGHT("DATA SCIENCE",7);
#SELECT THE LENGTH OF THE TEXT "DATA SCIENCE"
SELECT LENGTH("DATA SCIENCE");
#FIND THE LENGTH OF THE TEXT WITHOUT SPACE. 
SELECT LENGTH(REPLACE("DATA SCIENCE"," "," "));
--------------------------------------------------------------------------------------------------------------------------------------------------
#DATE AND TIME FUNCTIONS
#NOW(): Its show the date and time. 
#CURDATE: Its show the current date. 
#MONTH(): It show number of month. 
#MONTHNAME(): It show the name of month. 
#QUARTER(): It show the quarter of the month. 
#Year() Its show year from date. 
#DAY(): Its show the day number. 
#DAYNAME():Its show the day of name. 
#CURTIME():It show the current time. 
#ADDDATE(): It is used to add the date from the date column. 
--------------------------------------------------------------------------------------------------------------------------------------------------
SELECT NOW();
SELECT CURDATE();
SELECT CURRENT_DATE();
SELECT CURTIME();
SELECT CURRENT_TIME();
SELECT DATE_ADD("2024-04-01", INTERVAL 20 DAY);
SELECT MONTH("2024-08-5");
SELECT MONTHNAME("2024-08-5"); 
SELECT DAY(NOW()); 
SELECT DAYNAME(NOW()); 
SELECT QUARTER(NOW()); 
SELECT WEEK(NOW()); 
SELECT WEEKDAY(NOW()); 
SELECT YEAR(NOW()); 
SELECT YEARWEEK(NOW());
SELECT ADDDATE("2024-04-01", INTERVAL 20 DAY);
SELECT ADDDATE(NOW(), INTERVAL 2 WEEK);
SELECT ADDDATE("2024-01-01", INTERVAL 3 MONTH);
USE ABC_DB;
#HOW TO CREATE A TABLE AND HOW TO INSERT THE VALUE INTO THE TABLE. 
CREATE TABLE STUDENT_DETAILS(ROLL_NO INT, STUDENT_NAME VARCHAR(255), SUBJECT VARCHAR(255), MARKS FLOAT);
SELECT * FROM STUDENT_DETAILS;
INSERT INTO STUDENT_DETAILS(ROLL_NO, STUDENT_NAME, SUBJECT, MARKS) VALUES 
(1, "RAGHAV", "ENGLISH, HINDI, MATHS", 225),
(2, "PRINCE", "ENGLISH, MATHS, SCIENCE,SST", 350),
(3, "NEHA", "HINDI, ENGLISH,SCIENCE", 423),
(4, "JAYA", "MATHS, SCIENCE, SST, SANSKRIT", 450),
(5, "ANSHI", "ENSLISH, SCIENCE, MATHS, HINDI", 468),
(6, "KESHAV", "ENGLISH, HINDI, MATHS, SST", 530),
(7, "ZARA", "SCIENCE, ENGLISH, SST, HIDI", 540),
(8, "SAURABH", "SCIENCE, SST, SANSKRIT, HINDI", 360),
(9, "ABHISHEK", "SST, ENGLISH, HINDI, MATHS", 468),
(10, "ASHUTOSH", "ENGLISH, MATHS, SCIENCE, SST", 475);
SELECT * FROM STUDENT_DETAILS;
#CREATE A TABLE OF EMPLOYEE AND ADD COLUMN, SI_NO, EMP_NAME, AGE, CITY, SALARY. 
CREATE TABLE EMP_DETAILS_01(SI_NO INT, EMP_NAME VARCHAR(255), AGE INT, CITY VARCHAR(255), SALARY INT);
SELECT * FROM EMP_DETAILS_01;
INSERT INTO EMP_DETAILS_01(SI_NO, EMP_NAME, AGE, CITY, SALARY) VALUES
(1, "RAJAT", 35, "DELHI", 75000),
(2, "SHRISTI", 40, "PUNE", 45000),
(3, "AKASH", 32, "NOIDA", 60000),
(4, "AMAN", 25, "JAIPUR", 30000),
(5, "ANJALI", 28, "GURUGRAM", 38000),
(6, "CHETNA", 29, "CHANDIGARH", 42000),
(7, "KUNDAN", 33, "NOIDA", 86000),
(8, "MOHIT", 34, "JALANDAR", 50000),
(9, "GUNJAN", 27, "DELHI",46000),
(10, "MEGHA", 24, "DEHRADHUN", 35000);
SELECT * FROM EMP_DETAILS_01;
SELECT * FROM MARKSHEET;
#COVERT ALL STUDENT NAME IN CAPITAL LETTER
SELECT UPPER(STUDENTS_NAME) FROM MARKSHEET;
#CONVERT ALL ADDRESS IN CAPITAL LETTER
SELECT UPPER(ADDRESS) FROM MARKSHEET;
#SHOW THE LENGTH OF STUDENT NAME
SELECT LENGTH(STUDENTS_NAME) FROM MARKSHEET;
#REVERSE THE GENDER OF ALPHABET
SELECT REVERSE(GENDER) FROM MARKSHEET;
#ADD MARKS 20 IN EACH MARKS
SELECT MARKS, MARKS+20 FROM MARKSHEET;
#FIND FIRST NAMEOF STUDENT NAME FROM MARSHEET
SELECT LEFT(STUDENTS_NAME, INSTR(STUDENTS_NAME, " ")) AS FIRST_NAME FROM MARKSHEET;
#ALIYAS: IT IS A SORT NAME OR ANY COLUMN OR SHOW THE COLUMN HEADER. 
#WHERE CLAUSE: IT IS USE TO FILTER THE DDATA ACCORDING TO CONDITION. 
#WRITE A QUERY TO SHOW THE GENDER AS BOY ONLY 
SELECT * FROM MARKSHEET WHERE GENDER = "BOY";
#WRITE A QUERY TO SHOW THE GENDER AS GIRL ONLY
SELECT * FROM MARKSHEET WHERE GENDER = "GIRL";
#WRITE A QUERY TO SHOW THE STUDENT NAME AND AGE WHOSE ADDRESS IS DELHI
SELECT STUDENTS_NAME, AGE FROM MARKSHEET WHERE ADDRESS = "DELHI";
SELECT STUDENTS_NAME, AGE, ADDRESS FROM MARKSHEET WHERE ADDRESS = "DELHI";
#WITE A QUERY TO SHOW ALL DATA WHOSE AGE IS 26
SELECT * FROM MARKSHEET WHERE AGE = 26;
#WRITE A QUERY TO FETCH THE DETAILS WHOSE ADDRESS IS BIHAR
SELECT * FROM MARKSHEET WHERE ADDRESS = "BIHAR";
#WRITEA QUERY TO SHOW THE DETAILS WHOSE MARKS IS 435
SELECT * FROM MARKSHEET WHERE MARKS = 435;
#WRITE A QUERY TO SHOW THE AGE AFTER REDUCING 5 YEARS IN EVERY STUDENTS OF MARKSHEET
SELECT ROLL_NUMBER, STUDENTS_NAME, GENDER, AGE-5 AS AGE, ADDRESS FROM MARKSHEET;
#WRITE A QUERY TO SHOW ALL DETAILS WHOSE AGE IS LESS THAN 25
SELECT * FROM MARKSHEET WHERE AGE < 25;
#FILTER DATA WHOSE MARKS IS GREATER TAHN 400
SELECT * FROM MARKSHEET WHERE MARKS > 400;
#FILTER THE DATA WHOSE MARKS IS LESS THAN 250
SELECT * FROM MARKSHEET WHERE MARKS <250;
#FILTER THE DATA WHOSE AGE IS GREATER THAN 27
SELECT * FROM MARKSHEET WHERE AGE > 27;
#FILTER THE DATA WHOSE ROLL_NUMBER IS 1;
SELECT * FROM MARKSHEET WHERE ROLL_NUMBER = 1;
#FILTER THE DATA WHOSE AGE IS NOT EQUAL TO 25
SELECT * FROM MARKSHEET WHERE AGE <> 25;
#FILTER THE DATA WHOSE MARKS IS GREATER THAN 350
SELECT * FROM MARKSHEET WHERE MARKS > 350;
#FILTER THE DATA WHOSE MARKS IS NOT EQUAL TO 386
SELECT * FROM MARKSHEET WHERE MARKS <> 386;
#FILTER THE DATA WHOSE ADDRESS BIHAR OR DELHI
SELECT * FROM MARKSHEET WHERE ADDRESS = "BIHAR" OR "DELHI";
#FILTER THE DATA WHOSE ADDRESS IS BIHAR AND GENDER IS BOY
SELECT * FROM MARKSHEET WHERE ADDRESS = "BIHAR" AND GENDER = "BOY";
#WRITE A QUERY TO FILTER AGE BETWEEN 24 AND 25
SELECT * FROM MARKSHEET WHERE AGE BETWEEN 24 AND 25;
#WRITE A QUERY TO FILTER ADDRESS IS ASSAM, NOIDA OR HARYANA
SELECT * FROM MARKSHEET WHERE ADDRESS = "ASSAM" OR "NOIDA" OR "HARYANA";
#WRITE A QUERY TO SHOW THE STUDENT WHOSE ROLL NUMBER BETWEEN 10 TO 20
SELECT * FROM MARKSHEET WHERE ROLL_NUMBER BETWEEN 10 AND 20;
#SHOW THE STUDENT WHOSE AGE IS GREATER THAN 25 AND MARKS IS LESS THAN 250
SELECT * FROM MARKSHEET WHERE AGE > 25 AND MARKS < 250;
#SHOW THE STUDENT WHOSE GENDER IS GIRL AND MARKS IS GREATER THAN 450
SELECT * FROM MARKSHEET WHERE GENDER = "GIRL" AND MARKS > 450;
#SHOW THE DATA WHOSE ROLL_NUMBER IS EVEN NUMBER. 
SELECT * FROM MARKSHEET WHERE ROLL_NUMBER%2=0;
SELECT * FROM MARKSHEET WHERE MOD(ROLL_NUMBER,2) = 0;
#SHOW THE DATA WHOSE ROLL_NUMBER IS ODD NUMBER
SELECT * FROM MARKSHEET WHERE ROLL_NUMBER%2=1;
SELECT * FROM MARKSHEET WHERE MOD(ROLL_NUMBER,2) = 1;
#FILTERTHE DATA WHOSE ADDRESS IS BIHAR, DELHI, UP, HARYANA BY USING MEMBERSHIP OPERATORS
SELECT * FROM MARKSHEET WHERE ADDRESS IN("DELHI", "UP", "HARYANA", "BIHAR");
#FILTER THE DATA WHOSE ADDRESS IS NOT DELHI, BIHAR, UP, HARYANA
SELECT * FROM MARKSHEET WHERE ADDRESS NOT IN("DELHI", "UP","BIHAR","HARYANA"); 
SELECT * FROM EMPLOYEES;
#WRITE A QUERY TO SHOW THE EMPLOYEE NAME, SALRY AND  WHOSE DEPARTMENT IS DATA ANLYST
SELECT EMP_NAME, SALARY, DEPARTMENT FROM EMPLOYEES WHERE DEPARTMENT = "DATA ANALYST";
#WRITE A QUERY TO FETCH THE DATA WHOSE CITY IS PATNA
SELECT * FROM EMPLOYEES WHERE CITY = "PATNA";
#FILTER  DATA WHOSE AGE IS LESS THAN 22 AND CITY IS NOIDA AND DELHI
SELECT * FROM EMPLOYEES WHERE AGE < 22 AND CITY = "NOIDA" OR "DELHI";
SELECT * FROM EMPLOYEES WHERE AGE < 22 AND CITY IN("NOIDA", "DELHI");
#SHOW THE DATA WHOSE SALARY BETWEEN 30K TO 40K AND DEPARTMENT IS DATA SCIENTIST AND CITY IS PATNA
SELECT * FROM EMPLOYEES WHERE SALARY BETWEEN 30000 AND 40000 AND DEPARTMENT = "DATA SCIENTIST" AND CITY = "PATNA";
#SHOW THE EMPLOYEE WHERE AGE IS ODD NUMBER
SELECT * FROM EMPLOYEES WHERE AGE%2=1;
SELECT * FROM EMPLOYEES WHERE MOD(AGE,2) = 1;
#SHOW EMP_NAME, AGE, CITY, SALARY AND ALSO SHOW BONUS #BONUS = SALARY OF 20%
SELECT EMP_NAME, AGE, CITY,  SALARY, SALARY*0.2 AS BONUS FROM EMPLOYEES;
#SHOW THE NAME EMPLOYEE WHOSE NAME START WITH P 
SELECT EMP_NAME FROM EMPLOYEES WHERE LEFT(EMP_NAME,1) = "P";
#SHOW THE NAME OF EMPLOYEE WHOSE NAME END WITH A 
SELECT EMP_NAME FROM EMPLOYEES WHERE RIGHT(EMP_NAME,1) = "A";
#SHOW THE NAME OF EMPLOYEE WHOSE LENGTH IS LESS THAN 10
SELECT EMP_NAME FROM EMPLOYEES WHERE LENGTH(EMP_NAME)<10;
#SHOW CONTACT NUMBER OF EMPLOYEES WHOSENUMBER FIRST 2 NUMBER IS 91
SELECT `CONTACT NUMBER` FROM EMPLOYEES WHERE LEFT(`CONTACT NUMBER`,2) = 91;
#WRITE A QUERY TO SHOW THE EMPLOYEE NAME, SALARY AND DEPARTMENT IS DATA ANALYST
SELECT EMP_NAME, SALARY, DEPARTMENT FROM EMPLOYEES WHERE DEPARTMENT = "DATA ANALYST";
#WRITE A QUERY TO FETCH THE DATA WHOSE CITY IS PATNA
SELECT * FROM EMPLOYEES WHERE CITY = "PATNA";
#WRITE A QUERY TO FETCH THE DATA WHOSE AGE IS LESS THAN 25 AND CITY IS NOIDA AND NEW DELHI
SELECT * FROM EMPLOYEES WHERE AGE < 25 AND CITY = "NOIDA" OR "NEW DELHI";
#SHOW THE DATA WHOSE SALARY BETWEEN 30K TO 48K AND DEPARTMENT IS DATA SCIENTIST AND CITY IS PATNA
SELECT * FROM EMPLOYEES WHERE SALARY BETWEEN 30000 AND 48000 AND DEPARTMENT = "DATA SCIENTIST" AND CITY = "PATNA";
#SHOW THE EMPLOYEES WHOSE AGE IS ODD NUMBER
SELECT * FROM EMPLOYEES WHERE AGE%2 = 1;
SELECT * FROM EMPLOYEES WHERE MOD(AGE,2) = 1;
#WRITE A QUERY TO FETCH ALL DETAILS FROM TABLE CITY IN PATNA OR DELHI AND AGE BETWEEN 40 AND 60
SELECT * FROM EMPLOYEES WHERE CITY = "PATNA" OR "DELHI" AND AGE BETWEEN 40 AND 60;
#WRITE A QUERY TO SHOW THE NAMEOF EMPLOYEE, AGE, SALRY AND NAME START WITH VOWEL SOUND
SELECT EMP_NAME, AGE, SALARY FROM EMPLOYEES WHERE LEFT(EMP_NAME,1) IN ("A","E","I","O","U");
#WRITE A QUERY TO SHOW THE NAME OF EMPLOYEES, AGE, SALARY AND NAME START WITH CONSONANT SOUND
SELECT EMP_NAME, AGE, SALARY FROM EMPLOYEES WHERE LEFT(EMP_NAME,1) NOT IN ("A","E","I","O","U");
#WRITE A QUERY TO SHOW THE NAME OF CITY WHOSE START WITH J, D 
SELECT * FROM EMPLOYEES WHERE LEFT(CITY,1) IN("J","D");
#WRITE A QUERY TO SHOW THE NAME OF CITY WHOSE NOT START WITH P, K, I,B 
SELECT* FROM EMPLOYEES WHERE LEFT(CITY,1) NOT IN("P","K","I","B");
#WRITE A QUERY TO SHOW THE NAME OF CITY WHOSE NOT START WITH P, R,I 
SELECT * FROM EMPLOYEES WHERE LEFT(CITY,1) IN("P","R","I");
#WRITE A QUERY TO SHOW THE ALL CITY EXCEPT NEW DELHI
SELECT * FROM EMPLOYEES WHERE CITY <> "NEW DELHI";
#WRITE A QUERY TO SHOW ALL TABLE OF CITY NEW DELHI
SELECT * FROM EMPLOYEES WHERE CITY = "NEW DELHI";
SELECT * FROM EMPLOYEES;

----------------------------------------------------------------------------------------------------------------------------------------------------
#Aggrigate Function: Aggrigate function are used to perform the mathematical calculation. 
#1. Count()
#2. Sum()
#3. Average()
#4. Min()
#5. Max()
SELECT * FROM EMPLOYEES;
#COUNT TOTAL NUMBER TO ROWS FROM DATA
SELECT COUNT(*) AS TOTALROWS FROM EMPLOYEES;
#FIND THE SUM OF THE SALARY
SELECT SUM(SALARY) AS GRANDSALARY FROM EMPLOYEES;
#FIND THE AVERAGE SALARY OF EMPLOYEES
SELECT AVG(SALARY) AS AVERAGE_SALARY FROM EMPLOYEES;
SELECT ROUND(AVG(SALARY)) ASAVGSALARY FROM EMPLOYEES;
#FIND THE MINIMUM SALARY OF THE EMPLOYEES
SELECT MIN(SALARY) AS SALARY FROM EMPLOYEES;
#FIND THE MAXIMUM SALARY OF THE EMPLOYEES
SELECT MAX(SALARY) AS MAX_SALARY FROM EMPLOYEES;
#SHOW THE AVERAGE AGE OF DATA ANALYST
SELECT AVG(AGE) FROM EMPLOYEES WHERE DEPARTMENT = "DATA ANALYST";
#SHOW THE MINIMUM AGE OF DATA SCIENTIST
SELECT MIN(AGE) FROM EMPLOYEES WHERE DEPARTMENT = "DATA SCIENTIST";
#SHOW THE AVERAGE SALARY WHOSE AGE BETWEEN 20 TO 30
SELECT AVG(SALARY) FROM EMPLOYEES WHERE AGE BETWEEN 20 AND 30;
#SHOW THE SUM OF SALARY IN NEW DELHI
SELECT SUM(SALARY) FROM EMPLOYEES WHERE  CITY = "NEW DELHI";
#COUNT TOTAL NUMBER OF EMPLOYEE IN DATA ANALYST AND DATA SCIENTIST
SELECT COUNT(EMP_NAME) FROM EMPLOYEES WHERE DEPARTMENT = "DATA ANALYST" OR "DATA SCIENTIST";
SELECT COUNT(EMP_NAME) FROM EMPLOYEES WHERE DEPARTMENT IN ("DATA ANALYST", "DATA SCIENTIST");
#SHOW THE MAXIMUM  AGE OF EMPLOYEES IN PATNA
SELECT MAX(AGE) FROM EMPLOYEES WHERE CITY = "PATNA";
# SHOW THE MINIMUM, MAXIMUM AND AVERAGE SALARY OF EMPLOYEE IN DELHI
SELECT MIN(SALARY) AS MIN_SALARY, MAX(SALARY) AS MAX_SALARY, AVG(SALARY) AS AVG_SALARY FROM EMPLOYEES WHERE CITY = "DELHI";
SELECT * FROM EMPLOYEES;
#DISTINCT(): ITS SHOWS THE UNIQUE VALUE.
SELECT DISTINCT(CITY) FROM EMPLOYEES;
#COUNT TOTAL NUMBER  OF UNIQUE DEPARTMENT IN DATA SET. 
SELECT COUNT(DISTINCT(DEPARTMENT)) AS UNIQUE_DEPARTMENT FROM EMPLOYEES;
#COUNT TOTAL NUMBER OF EMPLOYEES WHOSE NAME START WITH P 
SELECT COUNT(DISTINCT(EMP_NAME)) FROM EMPLOYEES WHERE LEFT(EMP_NAME,1) = "P";
#COUNT TOTAL NUMBER OF EVEN OF SI_NO 
SELECT COUNT(`SI NO`) FROM EMPLOYEES WHERE `SI NO`%2=0;
SELECT COUNT(`SI NO`) FROM EMPLOYEES WHERE MOD(`SI NO`,2) = 0;
#COUNT TOTAL NUMBER OF ODD OF SI NO
SELECT COUNT(`SI NO`) FROM EMPLOYEES WHERE `SI NO`%2=1;
SELECT COUNT(`SI NO`) FROM EMPLOYEES WHERE MOD(`SI NO`,2) = 1;
SELECT COUNT(DISTINCT AGE) AS UNIQUE_AGE FROM EMPLOYEES;

#NESTED AGGREGATE FUNCTION
#SHOW THE NAME OF EMPLOYEE WHOSE AGE IS MAXIMUM
SELECT EMP_NAME, AGE FROM EMPLOYEES WHERE AGE = (SELECT MAX(AGE) FROM EMPLOYEES);
#SHOW THE DATA WHERE SALARY IS GREATER THAN AVERAGE SALARY
SELECT * FROM EMPLOYEES WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES);
#SHOW THE TABLE WHOSE SALARY IS MINIMUM
SELECT * FROM EMPLOYEES WHERE SALARY = (SELECT MIN(SALARY) FROM EMPLOYEES);
#SHOW DETAILS OF THE MINIMUM AGE OF EMPLOYEE
SELECT * FROM EMPLOYEES WHERE AGE = (SELECT  MIN(AGE) FROM EMPLOYEES);
#SHOW THE ALL COLUMNS OF EMPLOYEE WHOSE AGE IS MAXIMUM
SELECT * FROM EMPLOYEES WHERE AGE = (SELECT MAX(AGE) FROM EMPLOYEES);
SELECT * FROM EMPLOYEES;
#SHOW THE ALL COLUMNS OF EMPLOYEE WHOSE SALART IS GREATER THAN AVERAGE SALARY OF EMPLOYEES
SELECT EMP_NAME,AGE, DEPARTMENT, SALARY, CITY FROM EMPLOYEES WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES);
#SHOW THE ALL COLUMNS OF EMPLOYEES WHOSE SALARY IS LESS THEN AVERAGE SALARY OF EMPLOYEE IN DESCENDING ORDER
SELECT EMP_NAME, AGE, DEPARTMENT, SALARY, CITY FROM EMPLOYEES WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES) ORDER BY SALARY DESC;
#SHOW THE ALL COLUMNS OF EMPLOYEE WHOSE CITY IS MAXIMUM
SELECT * FROM EMPLOYEES WHERE CITY = (SELECT MAX(CITY) FROM EMPLOYEES);
# WRITE A QUERY TO SHOW THE DIFFERNCE BETWEEN MAX AGE OF EMPLYOEE TO MINIMUM AGE OF EMPLOYEE
SELECT MAX(AGE)-MIN(AGE) AS DIFF_AGE FROM EMPLOYEES;

#ORDER BY: IT IS USED TO ARRANGE THE DATA IN ASCENDING ORDER OR DESECNDING ORDER. 
SELECT * FROM EMPLOYEES ORDER BY AGE DESC;
SELECT * FROM EMPLOYEES ORDER BY SALARY DESC;
#WRITE A QUERY TO FETCH THE DETAILS OF CITY SHOULD BE STORED IN ASCENDING ORDER AND WHEN IS CITY IS TIE THEN SORT THE DATA BY AGE IN ASCENDING ORDER 
SELECT * FROM EMPLOYEES ORDER BY CITY, AGE ASC;
#WRITE A QUERY TO FETCH THE DETAILS & SHOW THE SALARY IN DESENDING ORDER & AGE ASCENDING ORDER
SELECT * FROM EMPLOYEES  ORDER BY SALARY DESC, AGE ASC;
#WRITE A QUERY TO FETCH THE DETAILS & SHOW THE EMPLOYEE NAME IN ALPHABETICAL ORDER
SELECT * FROM EMPLOYEES ORDER BY TRIM(EMP_NAME);
#WRITE A QUERY TO SORT THE TABLE BY LENGTH OF THE EMPLOYEE IF LENGTH IS EQUAL THAN SORT THE DATA BY NAME
SELECT * FROM EMPLOYEES ORDER BY LENGTH(TRIM(EMP_NAME)),EMP_NAME;

#LIMIT: IT IS USED TO EXTRACT THE DATA FROM DATA SET TOP, BOTTOM AND MID. 
SELECT * FROM EMPLOYEES LIMIT 2;
SELECT * FROM EMPLOYEES LIMIT 4, 5;
SELECT * FROM EMPLOYEES LIMIT 2,5;
# SHOW 2 EMPLOYEES BASED ON SALARY
SELECT* FROM EMPLOYEES ORDER BY SALARY  DESC LIMIT 2;
#SHOW THE TOP 2 EMPLOYEES BASE OF SALARY
SELECT * FROM EMPLOYEES ORDER BY SALARY DESC LIMIT 2;
#SHOW THE BOTTOM 4 EMPLOYEES BASE OF SALARY
SELECT * FROM EMPLOYEES ORDER BY SALARY ASC LIMIT 4;
#WRITE A QUERY TO SHOW MAXIMUM AGE IN EACH CITY AND SHOW THE TABLE IN DECRESING ORDER BY MAXIMUM AGE
SELECT CITY, MAX(AGE) FROM EMPLOYEES GROUP BY CITY ORDER BY MAX(AGE) DESC;
#WRITE A QUERY TO SHOW MINIMUM LENGTH OF EMP_NAME BY EACH CITY
SELECT CITY, MIN(LENGTH(EMP_NAME)) FROM EMPLOYEES GROUP BY CITY;
#SHOW THE NAME, AGE, SALARY OD TOP 5 EMPLOYEE BASE ON SALARY
SELECT EMP_NAME, AGE, SALARY FROM EMPLOYEES ORDER BY SALARY DESC LIMIT 5;
#SHOW THE DATA OF BOTTOM 5 EMPLOYEE BASE ON AGE
SELECT * FROM EMPLOYEES ORDER BY AGE LIMIT 5;
#WRITE A QUERY TO SHOW THE DATA MAXIMUM SALES IN WEST
SELECT * FROM DATA;
SELECT * FROM DATA WHERE REGION = "WEST" AND SALES_AMOUNT = (SELECT MAX(SALES_AMOUNT) FROM DATA WHERE REGION = "WEST");
SELECT * FROM DATA WHERE REGION = "WEST" ORDER BY SALES_AMOUNT LIMIT 1;
#FILTER THE DATA WHERE SALES AMOUNT IS GREATER THAN AVERAGE SALES
SELECT * FROM DATA WHERE SALES_AMOUNT > (SELECT AVG(SALES_AMOUNT) FROM DATA);
#FILTER THE DATA OF SOUTH REGION WHERE PROFIT IS MAXIMUM
SELECT * FROM DATA WHERE REGION = "SOUTH" AND PROFIT = (SELECT MAX(PROFIT) FROM DATA WHERE REGION = "SOUTH");
SELECT * FROM DATA WHERE REGION = "SOUTH" ORDER BY PROFIT DESC LIMIT 1;
#SHOW THE TOP 3 DATA SET OF PROFIT
SELECT * FROM DATA ORDER BY PROFIT DESC LIMIT 3;
#WRITE A QUERY TO FETCH THE DATA WHERE REGION IS EAST, WEST OR SOUTH AND PRODUCT A 
SELECT * FROM DATA WHERE REGION IN ("EAST", "WEST", "SOUTH") AND PRODUCT = "PRODUCT_A";
#ACCORDING TO COVID DATA
#SHOW THE TOP 5 COUNTRY BY CONFIRMED CASE
SELECT COUNTRY, SUM(CONFIRMED) AS CNF FROM COVID GROUP BY COUNTRY ORDER BY CNF DESC LIMIT 5;
#SHOW THE TOP 3 WHO REGION BY DEATH
SELECT `WHO REGION`, SUM(DEATHS) AS DEATH FROM COVID GROUP BY `WHO REGION` ORDER BY DEATH DESC LIMIT 3;
#WRITE A QUERY TO SHOW THE SUM OF CONFIRMED, DEATHS, RECOVERED & ACTIVE CASE BY EACH COUNTRY AND SHOW THE DATA WHOSE CONFIRMED CASE IS LESS THAN 40K. 
SELECT COUNTRY, SUM(CONFIRMED) AS CNF,
				SUM(DEATHS) AS DEATHS,
                SUM(RECOVERED) AS RECOVER,
                SUM(ACTIVE) AS ACTIVE
                FROM COVID GROUP BY COUNTRY HAVING CNF <40000;
#WRITE A QUERY TO SHOW THE AVERAGE CONFIRMED, DEATHS AND RECOVERED BY EACH MONTHS AND ADDRESS RECOVERED IN DESC ORDER
SELECT MONTHNAME(DATE) AS MONTH, AVG(CONFIRMED) AS AVG_CNF,
				 AVG(DEATHS) AS AVG_DEATHS,
                 AVG(RECOVERED) AS AVG_RECOVERED
                 FROM COVID GROUP BY MONTH ORDER BY AVG_RECOVERED DESC;
SELECT * FROM COVID;

----------------------------------------------------------------------------------------------------------------------------------------------------
#ALTER : ADD COLUMN, DELETE COLUMN, RENAME COLUMN, MODIFY COLUMN
#HOW TO DELETE COLUMN PROFIT FROM DATA
ALTER TABLE DATA DROP COLUMN PROFIT;
SELECT * FROM DATA;
#DELETE THE COLUMN OF REGION
ALTER TABLE DATA DROP COLUMN REGION;
SELECT * FROM DATA;
#ADD A COLUMN OF PROFIT IN DATA
ALTER TABLE DATA ADD COLUMN PROFIT FLOAT;
SELECT * FROM DATA;
#ADD TWO COLUMN IN EMP FIRST ONE IS STATUS AND SECOND ONE IS LOSS
ALTER TABLE DATA ADD COLUMN STATUS VARCHAR(255), ADD COLUMN LOSS INT;
SELECT * FROM DATA;
#DELETE THREE COLUMN PROFIT, STATUS & LOSS
ALTER TABLE DATA DROP COLUMN PROFIT;
ALTER TABLE DATA DROP COLUMN STATUS;
ALTER TABLE DATA DROP COLUMN LOSS;
SELECT * FROM DATA;
#ADD A COLUMN OF BONUS IN AFTER THE SALARY
ALTER TABLE DATA ADD BONUS INT AFTER SALES_PERSON;
SELECT * FROM DATA;
#ADD A COLUMN OF PROFIT BEFORE THE BONUS
ALTER TABLE DATA ADD PROFIT INT AFTER BONUS;
SELECT * FROM DATA;
#ADD A COLUMN OF PRODUCT_ID BEFORE THE PRODUCT
ALTER TABLE DATA ADD PRODUCT_ID TEXT AFTER PRODUCT;
SELECT * FROM DATA;
#ADD A COLUMN OF EMP_ID BEFORE PRODUCT
ALTER TABLE DATA ADD EMP_ID INT FIRST;
SELECT * FROM DATA;
#ADD A COLUMN OF ABC AND ALSO DELETE COLUMN BONUS
ALTER TABLE DATA ADD ABC INT, DROP COLUMN BONUS;
SELECT * FROM DATA;
ALTER TABLE DATA DROP EMP_ID, DROP PRODUCT_ID, DROP PROFIT, DROP ABC;
SELECT * FROM DATA;
#CHANGE/RENAME OF HEADERS
ALTER TABLE DATA RENAME COLUMN SALES_AMOUNT TO TOTAL_SALES;
SELECT * FROM DATA;
#HOW TO CHECK DATA OF TABLE
DESC TABLE DATA;
DESC DATA;
DESCRIBE DATA;
ALTER TABLE DATA MODIFY PRODUCT TEXT;
SELECT * FROM DATA;
#UPDATE:  IT IS USED TO ADD THE VALUE IN PARTICULAR CELLS. 
UPDATE DATA SET SALES_PERSON = "JOHN RANA" WHERE QUANTITY_SOLD = 5;
SET SQL_SAFE_UPDATES = 0;
#ADD A COLUMN OF PROFIT AND ADD RANDOM VALUE FROM 2000 TO 5000
ALTER TABLE DATA ADD COLUMN PROFIT FLOAT;
UPDATE DATA SET PROFIT = ROUND(200+RAND()*300) WHERE PROFIT IS NULL;
SELECT * FROM DATA;
#ADD A COLUMN OF STATUS OF YES WHERE NAME START WITH J OR A ELASE NO
ALTER TABLE DATA ADD COLUMN STATUS TEXT;
UPDATE DATA SET STATUS = "YES" WHERE LEFT(SALES_PERSON,1) IN("J","A");
UPDATE DATA SET STATUS = "NO" WHERE STATUS IS NULL;
SELECT * FROM DATA;
#DELETE COMMANDS: IT IS USED TO DELETE THE ROWS FROM THE TABLE. 
#DELETE THE FIRST FIVE ROWS FROM THE TABLE 
DELETE FROM DATA ORDER BY DATE DESC LIMIT 5;
SELECT * FROM DATA;
#DELETE THE ROWS WHERE PRODUCT IS PRODUCT_B
DELETE FROM DATA WHERE PRODUCT = "PRODUCT_B";
SELECT * FROM DATA;
#DELETE THE ROWS WHERE QUANTITY SOLD BETWEENN 1 AND 10 AND PROFIT BETWEEN 2300 TO 2800
DELETE FROM DATA WHERE QUANTITY_SOLD BETWEEN 1 AND 10 AND PROFIT BETWEEN 2300 AND 2800;
SELECT * FROM DATA;
#DELETE THE ROWS WHERE PRODUCT IS PRODUCT A AND SALES PERSON NAME END WITH X AND N
DELETE FROM DATA WHERE PRODUCT = "PRODUCT_A" AND RIGHT(SALES_PERSON,1) IN("X","N");
SELECT * FROM DATA;

---------------------------------------------------------------------------------------------------------------------------------------------------
#GROUP BY: IT IS USED TO ANALYSE THE LARGE AMOUNT OF DATA IN EASY MANNER WITH THE HELP OF AGGREGATE FUNCTION
#GROUP BY ARE USED TO GROUP THE SAME CATEGORY OF DATA WITH AGGREGATE FUNCTION, SUM, MIN, MAX, COUNT & AVERAGE 
#FIND THE MAXIMUM SALARY OF DATA ANALYST
SELECT MAX(SALARY) FROM EMPLOYEES WHERE DEPARTMENT = "DATA ANALYST";
#FIND THE AVERAGE SALARY OF EMPLOYEE WHO LIVE IN NEW DELHI
SELECT AVG(SALARY) FROM EMPLOYEES WHERE CITY = "NEW DELHI";
#FIND THE MAXIMUM SALARY OF EACH DEPARTMENT 
SELECT MAX(SALARY), DEPARTMENT FROM EMPLOYEES GROUP BY DEPARTMENT;
#COUNT TOTAL NUMBER OF EMPLOYEE IN EACH CITY
SELECT COUNT(EMP_NAME), CITY FROM EMPLOYEES GROUP BY CITY;
#SHOW MINIMUM AGE OF EMPLOYEE IN EACH DEPARTMENT
SELECT MIN(AGE), DEPARTMENT FROM EMPLOYEES GROUP BY DEPARTMENT;
#SHOW THE AVERAGE SALRY OF EMPLOYEE IN EACH DEPARTMENT
SELECT AVG(SALARY), DEPARTMENT FROM EMPLOYEES GROUP BY DEPARTMENT;
#SHOW SUM OF SALARY OF EACH CITY
SELECT SUM(SALARY), CITY FROM EMPLOYEES GROUP BY CITY;
#SHOW THE MAXIMUM AND MINIMUM AGE OF EMPLOYEE IN EACH CITY
SELECT MAX(AGE), MIN(AGE), CITY FROM EMPLOYEES GROUP BY CITY;
#SHOW AVERAGE AGE OF EMPLOYEE BY EACH CITY AND DEPARTMENT
SELECT AVG(AGE), CITY, DEPARTMENT FROM EMPLOYEES GROUP BY CITY, DEPARTMENT;
#SHOW THE TOP 3 DEPARTMENT WHOSE SALARY IS HIGH
SELECT MAX(SALARY), DEPARTMENT FROM EMPLOYEES GROUP BY DEPARTMENT ORDER BY MAX(SALARY) LIMIT 3;
#SHOW BOTTOM 3 CITY WHERE NUMBER OF EMPLOYEE IS VERY LESS
SELECT COUNT(EMP_NAME), CITY FROM EMPLOYEES GROUP BY CITY ORDER BY COUNT(EMP_NAME) ASC LIMIT 3;
#SHOW THE MAXIMUM MINIMUM SALARY BY DEPARTMENT
SELECT MAX(SALARY), MIN(SALARY), DEPARTMENT FROM EMPLOYEES GROUP BY DEPARTMENT;
#COUNT TOTAL NUMBER OF STUDENT IN BIHAR
SELECT COUNT(*) FROM MARKSHEET WHERE ADDRESS = "BIHAR";
#SHOW THE MAX MARKS OF STUDENTS IN GIRL
SELECT MAX(MARKS) FROM MARKSHEET WHERE GENDER = "GIRL";
#COUNT TOTAL NUMBER OF STUDENT IN EACH ADDRESS
SELECT COUNT(*), ADDRESS  FROM MARKSHEET GROUP BY ADDRESS;
#WRITE A QUERY TO SHOW THE MAXIMUM MARKS IN EACH ADDRESS
SELECT MAX(MARKS), ADDRESS FROM MARKSHEET GROUP BY ADDRESS;
#WRITE A QUERY TO SHOW THE AVERAGE MARKS OF STUDENTS BY EACH ADDRESS
SELECT AVG(MARKS), ADDRESS FROM MARKSHEET GROUP BY ADDRESS;
#COUNT TOTAL NUMBER OF STUDENT BY EACH GENDER
SELECT * FROM MARKSHEET;
SELECT COUNT(STUDENTS_NAME), GENDER FROM MARKSHEET GROUP BY GENDER;
#SHOW THE MINIMUM MARKS OF STUDENTS OF EACH ADDRESS
SELECT MIN(MARKS), ADDRESS FROM MARKSHEET GROUP BY ADDRESS;
#SHOW THE AVERAGE AGE OF STUDENT IN EACH GENDER
SELECT AVG(AGE), GENDER FROM MARKSHEET GROUP BY GENDER;
#WRITE A QUERY TO COUNT TOTAL NUMBER OF EMPLOYEE AND AVERAGE AGE OF EMPLOYEE IN EACH DEPARTMENT
SELECT COUNT(EMP_NAME), AVG(AGE), DEPARTMENT FROM EMPLOYEES GROUP BY DEPARTMENT;
#WRITE A QUERY TO SHOW THE MAXIMUM AND MINIMUM SALRY OF EMPLOYEE BY EACH DEPARTMENT
SELECT MAX(SALARY), MIN(SALARY), DEPARTMENT FROM EMPLOYEES GROUP BY DEPARTMENT;
#WRITE A QUERY TO SHOW THE AVERAGE AGE BY EACH CITY AND AVERAGE AGE WITH ONE DECIMAL NUMBER
SELECT ROUND(AVG(AGE),1) AS AVG_AGE, CITY FROM EMPLOYEES GROUP BY CITY;
#WRITE A QUERY TO SHOW THE SUM OF SALARY BY EACH CITY AND DEPARTMENT
SELECT SUM(SALARY), CITY, DEPARTMENT FROM EMPLOYEES GROUP BY CITY, DEPARTMENT;
#SHOW THE MAXIMUM AGE IN EACH DEPARTMENT
SELECT DEPARTMENT, MAX(AGE) FROM EMPLOYEES GROUP BY DEPARTMENT;
#SHOW THE AVERAGE SALARY IN EACH CITY AND ARRANGE IN DESENDING ORDER 
SELECT CITY, AVG(SALARY) AS AVG_SALARY FROM EMPLOYEES GROUP BY CITY ORDER BY AVG_SALARY DESC;
#SHOW THE SUM OF SALARY IN EACH DEPARTMENT AND SHOW TOP 4 DEPARTMENT BASE OF SALARY
SELECT DEPARTMENT, SUM(SALARY) AS SUM_SALARY FROM EMPLOYEES GROUP BY DEPARTMENT ORDER BY SUM_SALARY DESC LIMIT 4;

------------------------------------------------------------------------------------------------------------------------------------------------------
#CASE IN SQL: CASE ARE USED TO DIVIDE THE DATA ACCORDING TO CONDITION, WHEN THE FIRST CONDITION IS TRUE, IT WILL STOP READING AND RETURN RESULT. 
#IF NO CONDITION ARE TRUE, IT RETURNS THE VALUE IN THE ELSE CLAUSE.
SELECT *,
CASE  
WHEN AGE >= 40 THEN "SENIOR" 
ELSE "JUNIOR" END AS STATUS 
FROM EMPLOYEES;
#WRITE A SQL QUERY TO SHOW THE STATUS IF SALARY IS GREATER THAN 50K THEN SHOW GOOD ELSE SHOW BAD
SELECT *,
CASE
WHEN SALARY > 50000 THEN "GOOD"
ELSE "BAD" END AS SATUS
FROM EMPLOYEES;
#WRITE A QUERY TO SHOW THE CATEGORY IF NAME START WITH VOWEL SOUND THEN SHOW "YES" ELSE SHOW "NO"
SELECT *,
CASE
WHEN LEFT(TRIM(EMP_NAME),1)IN("A","E","I","O","U") THEN "YES"
ELSE "NO" END AS STATUS
FROM EMPLOYEES;
#WRITE A QUERY TO SHOW THE STATUS OF AGE IF AGE IS BETWEEN 20 TO  30 THEN SHOW "A", IF AGE IS BETWEEN 30 TO 40 THEN SHOW "B", IF AGE IS BETWEEN 40 TO 50 THEN SHOW "C" ELSE SHOW "OTHER" 
SELECT *,
CASE
WHEN AGE BETWEEN 20 AND 30 THEN "A"
WHEN AGE BETWEEN 30 AND 40 THEN "B"
WHEN AGE BETWEEN 40 AND 50 THEN "C"
ELSE "OTHER" END AS STATUS
FROM EMPLOYEES;
#WRITE A SQL QUERY TO SHOW THE BONUS OF EMP, IF SALARY IS GREATER THAN AVERAGE SALARY THEN SHOW 30% 0F SALARY ELSE SHOW 10% OF SALARY
SELECT *,
CASE
WHEN SALARY > (SELECT AVG(SALARY)FROM EMPLOYEES) THEN 0.3*SALARY
ELSE 0.1*SALARY END AS BONUS
FROM EMPLOYEES;
#SHOW A COLUMN OF STATUS, IF CONFIRMED CASE IS GREATER THAN AVERAGE CONFIRMED CASE THAN SHOW "DANGER ZONE" ELSE  SHOW "SAFE ZONE"
SELECT *,
CASE
WHEN CONFIRMED > (SELECT AVG(CONFIRMED) FROM COVID) THEN "DANZER ZONE"
ELSE  "SAFE ZONE" END AS STATUS
FROM COVID HAVING STATUS = "DANZER ZONE";
SELECT * FROM(
SELECT *,
CASE
WHEN CONFIRMED > (SELECT AVG(CONFIRMED) FROM COVID) THEN "DANZER ZONE"
ELSE "SAFE ZONE" END AS STATUS FROM COVID) AS T1 WHERE STATUS = "DANZER ZONE";

------------------------------------------------------------------------------------------------------------------------------------------------------
#HAVING CLAUSE: IT IS USED TO FILTER THE DATA AFTER USING GROUP BY FUNCTION, 
#IT IS USED TO FILTER THE DATA ACCORDING TO CONDITION BUT ITS WORK WITH NON EXISTING DATA LIKE GROUP BY, JOINS. 
#THE HAVING CLAUSE WAS ADDED TO SQL BECAUSE THE WHERE KEYWORD CANNOT BE USED WITH AGGREGATE FUNCTIONS.
#SHOW THE MINIMUM AGE OF EMPLOYEES IN EACH DEPARTMENT WHOSE AGE IS LESS THAN 20. 
SELECT DEPARTMENT, MIN(AGE) AS MIN_AGE  FROM EMPLOYEES GROUP BY DEPARTMENT HAVING MIN_AGE<20;
#WRITE A QUERY TO SHOW THE NUMBER OF EMPLOYEES WHOSE AGE IS GREATER THAN 40.
SELECT COUNT(*) FROM EMPLOYEES WHERE AGE > 40;
#WRITE A QUERY TO SHOW TOTAL NUMBER OF EMPLOYEE IN EACH DEPARTMENT. 
SELECT DEPARTMENT, COUNT(*) FROM EMPLOYEES GROUP BY DEPARTMENT;

------------------------------------------------------------------------------------------------------------------------------------------------------
#UNION: IT IS USED TO COMBINE THE SAME CATEGORY OF QUERY AND ITS REMOVE THE DUPLICATE VALUE. 
#UNION ALL: IT IS USED TO COMBINE THE SAME CATEGORY OF QUERY AND ITS ALLOW DUPLICATE VAALUES. 
SELECT * FROM EMPLOYEES WHERE AGE = 21
UNION
SELECT * FROM EMPLOYEES WHERE SALARY = 28353;
SELECT * FROM EMPLOYEES WHERE CITY = "JAIPUR"
UNION
SELECT * FROM EMPLOYEES WHERE AGE = 45;
SELECT * FROM MARKSHEET WHERE ROLL_NUMBER
UNION
SELECT * FROM MARKSHEET WHERE ROLL_NUMBER = 10;
SELECT ADDRESS FROM MARKSHEET
UNION
SELECT ADDRESS FROM MARKSHEET;

